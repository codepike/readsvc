package org.readingplanets.svc.mapper;

import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;
import org.readingplanets.svc.model.Book;

import java.util.List;

/**
 * Book mapper.
 */
public interface BookMapper {

    /**
     * Return a list of books.
     *
     * @return a list of books
     */
    @Select("SELECT id, title, author, isbn, year, cover FROM book")
    @Results(value = {
            @Result(property = "id", column = "ID", jdbcType=JdbcType.INTEGER),
            @Result(property = "title", column = "TITLE", jdbcType=JdbcType.VARCHAR),
            @Result(property = "series", column = "SERIES", jdbcType=JdbcType.VARCHAR),
            @Result(property = "author", column = "AUTHOR", jdbcType=JdbcType.VARCHAR),
            @Result(property = "isbn", column = "ISBN", jdbcType=JdbcType.VARCHAR),
            @Result(property = "year", column = "YEAR", jdbcType=JdbcType.INTEGER),
            @Result(property = "cover", column = "COVER", jdbcType=JdbcType.VARCHAR)
    })
    List<Book> getAll();

    /**
     * Insert a new book into database. The id of the book will be generated by autoincrement.
     * The id in the book object is not used.
     *
     * @param book the book to persist
     */
    @Insert("INSERT INTO book(title, series, author,isbn,year,cover)" +
            "VALUES(#{title}, #{series}, #{author}, #{isbn}, #{year}, #{cover})")
    void insert(Book book);

    /**
     * Updated a book.
     *
     * @param book the book to update
     */
    @Update("UPDATE book SET title = #{title}, series = #{series}, author = #{author}, isbn = #{isbn}, year=#{year}, cover=#{cover} WHERE id = #{id}")
    void update(Book book);

    /**
     * Return a book by book ID.
     *
     * @param id the book ID to look up
     * @return a book of the book ID
     */
    @Select("SELECT id, title, series, author, isbn, year, cover FROM book where id = #{id}")
    @Results({
            @Result(property = "id", column = "ID", jdbcType=JdbcType.INTEGER),
            @Result(property = "title", column = "TITLE", jdbcType=JdbcType.VARCHAR),
            @Result(property = "series", column = "SERIES", jdbcType=JdbcType.VARCHAR),
            @Result(property = "author", column = "AUTHOR", jdbcType=JdbcType.VARCHAR),
            @Result(property = "isbn", column = "ISBN", jdbcType=JdbcType.VARCHAR),
            @Result(property = "year", column = "YEAR", jdbcType=JdbcType.INTEGER),
            @Result(property = "cover", column = "COVER", jdbcType=JdbcType.VARCHAR)
    })
    Book getBook(@Param("id") int id);


    @Select("SELECT EXISTS(SELECT 1 FROM book WHERE id=#{id})")
    boolean exists(@Param("id") int id);
}
